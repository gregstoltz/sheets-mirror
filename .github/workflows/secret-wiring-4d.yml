      # --- 4D: verify URLs return CSV headers (literal URLs for setup) ---
      - name: [4D] Secrets wiring smoke test (temporary literal URLs)
        env:
          SCAN_URL: "https://docs.google.com/spreadsheets/d/1op-6H-jXLpM0rJWkfUdVVeY-kw4MVkkFYXz36N_67Ts/gviz/tq?tqx=out:csv&sheet=SCAN"
          PRICES_URL: "https://docs.google.com/spreadsheets/d/1op-6H-jXLpM0rJWkfUdVVeY-kw4MVkkFYXz36N_67Ts/gviz/tq?tqx=out:csv&sheet=Prices"
          GLOBAL_CHECK_URL: "https://docs.google.com/spreadsheets/d/1op-6H-jXLpM0rJWkfUdVVeY-kw4MVkkFYXz36N_67Ts/gviz/tq?tqx=out:csv&sheet=GLOBAL_CHECK"
          HEALTH_URL: "https://docs.google.com/spreadsheets/d/1op-6H-jXLpM0rJWkfUdVVeY-kw4MVkkFYXz36N_67Ts/gviz/tq?tqx=out:csv&sheet=HEALTH"
          GF_URL: "https://docs.google.com/spreadsheets/d/1op-6H-jXLpM0rJWkfUdVVeY-kw4MVkkFYXz36N_67Ts/gviz/tq?tqx=out:csv&sheet=__GF_FETCH__"
        run: |
          set -euo pipefail

          # 1) Check that each URL env exists (non-empty)
          for k in SCAN_URL PRICES_URL GLOBAL_CHECK_URL HEALTH_URL GF_URL; do
            v="${!k:-}"
            if [ -z "$v" ]; then
              echo "::error ::$k is MISSING or empty"; exit 1
            fi
            echo "::notice ::$k present (length ${#v})"
          done

          # 2) Curl each URL: show status + first CSV header line
          test_csv () {
            NAME="$1"; URL="$2"
            echo "---- $NAME ----"
            status=$(curl -sI "$URL" | sed -n '1p')
            echo "HTTP $status"
            head=$(curl -fsSL --retry 3 --retry-delay 2 --max-time 45 "$URL" | head -1 || true)
            if [ -z "$head" ]; then
              echo "::error ::$NAME returned empty body"; exit 1
            fi
            echo "Header: $head"
            echo
          }

          test_csv "SCAN"         "$SCAN_URL"
          test_csv "Prices"       "$PRICES_URL"
          test_csv "GLOBAL_CHECK" "$GLOBAL_CHECK_URL"
          test_csv "HEALTH"       "$HEALTH_URL"
          test_csv "__GF_FETCH__" "$GF_URL"
